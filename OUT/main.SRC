; .\OUT\main.SRC generated from: .\main.c

$NOMOD51

NAME	MAIN

CCF2	BIT	0C0H.2
CCF3	BIT	0C0H.3
P0	DATA	080H
CCF4	BIT	0C0H.4
P1	DATA	090H
P2	DATA	0A0H
AA	BIT	0D8H.2
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
T2	BIT	090H.0
EC	BIT	0A8H.6
CF	BIT	0C0H.7
CH	DATA	0F9H
FE	BIT	098H.7
IEN0	DATA	0A8H
IEN1	DATA	0E8H
CL	DATA	0E9H
CCAP0H	DATA	0FAH
CEX0	BIT	090H.3
CCAP1H	DATA	0FBH
CEX1	BIT	090H.4
CCAP2H	DATA	0FCH
CP	BIT	0C8H.0
CEX2	BIT	090H.5
CCAP3H	DATA	0FDH
CCAP4H	DATA	0FEH
CCAP0L	DATA	0EAH
CR	BIT	0C0H.6
CCAP1L	DATA	0EBH
CCAPM0	DATA	0C2H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
CCAP2L	DATA	0ECH
CCAPM1	DATA	0C3H
CCAP3L	DATA	0EDH
CCAPM2	DATA	0C4H
ENS1	BIT	0D8H.6
CCAP4L	DATA	0EEH
CCAPM3	DATA	0C5H
UD	BIT	0D0H.1
IP	DATA	0B8H
CCAPM4	DATA	0C6H
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
SI	BIT	0D8H.3
INT1	BIT	0B0H.3
TI	BIT	098H.1
IE0_	BIT	088H.1
IE1_	BIT	088H.3
RCAP2H	DATA	0CBH
SP	DATA	081H
CMOD	DATA	0C1H
CCON	DATA	0C0H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
P10	BIT	090H.0
PCON	DATA	087H
P20	BIT	0A0H.0
P11	BIT	090H.1
P21	BIT	0A0H.1
P12	BIT	090H.2
P22	BIT	0A0H.2
P13	BIT	090H.3
P23	BIT	0A0H.3
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
AD0	BIT	080H.0
P24	BIT	0A0H.4
P15	BIT	090H.5
AD1	BIT	080H.1
P25	BIT	0A0H.5
P16	BIT	090H.6
AD2	BIT	080H.2
P26	BIT	0A0H.6
P17	BIT	090H.7
AD3	BIT	080H.3
P27	BIT	0A0H.7
AD4	BIT	080H.4
AD5	BIT	080H.5
AD6	BIT	080H.6
AD7	BIT	080H.7
AD8	BIT	0A0H.0
AD9	BIT	0A0H.1
AUXR	DATA	08EH
B	DATA	0F0H
CR0	BIT	0D8H.0
CR1	BIT	0D8H.1
ACC	DATA	0E0H
CR2	BIT	0D8H.7
ES0	BIT	0A8H.4
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ES1	BIT	0A8H.5
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0E8H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
TH1	DATA	08DH
IT0	BIT	088H.0
TH2	DATA	0CDH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
ECI	BIT	090H.2
TL1	DATA	08BH
TL2	DATA	0CCH
SM2	BIT	098H.5
PS0	BIT	0B8H.4
PT0	BIT	0B8H.2
PS1	BIT	0B8H.5
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.7
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.2
SDA	BIT	090H.7
PX1	BIT	0B8H.2
S1ADR	DATA	0DBH
DPH	DATA	083H
S1DAT	DATA	0DAH
DPL	DATA	082H
IPH	DATA	0B7H
SCL	BIT	090H.6
EXEN2	BIT	0C8H.3
PPC	BIT	0B8H.6
S0CON	DATA	098H
REN	BIT	098H.4
S1CON	DATA	0D8H
AD10	BIT	0A0H.2
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
AD11	BIT	0A0H.3
AD12	BIT	0A0H.4
STA	BIT	0D8H.5
AD13	BIT	0A0H.5
WDTRST	DATA	0A6H
AD14	BIT	0A0H.6
AD15	BIT	0A0H.7
SADEN	DATA	0B9H
S1STA	DATA	0D9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
AUXR1	DATA	0A2H
S1IST	DATA	0DCH
F0	BIT	0D0H.5
STO	BIT	0D8H.4
PSW	DATA	0D0H
CCF0	BIT	0C0H.0
CCF1	BIT	0C0H.1
?PR?main?MAIN        SEGMENT CODE 
?DT?main?MAIN        SEGMENT DATA OVERLAYABLE 
?PR?GetCommand?MAIN  SEGMENT CODE 
?DT?GetCommand?MAIN  SEGMENT DATA OVERLAYABLE 
?PR?ProcessCommand?MAIN                  SEGMENT CODE 
?DT?ProcessCommand?MAIN                  SEGMENT DATA OVERLAYABLE 
?CO?MAIN             SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?XD?MAIN             SEGMENT XDATA 
	EXTRN	XDATA (ADDR25)
	EXTRN	CODE (InitFlash)
	EXTRN	XDATA (FileStart)
	EXTRN	XDATA (rparameter_buffer)
	EXTRN	CODE (FindEnd)
	EXTRN	XDATA (ADDR9_16)
	EXTRN	XDATA (wparameter_buffer)
	EXTRN	XDATA (FileSize)
	EXTRN	CODE (ReadOnePage)
	EXTRN	CODE (FindNextPage)
	EXTRN	CODE (_GetKey)
	EXTRN	CODE (WriteOnePage)
	EXTRN	XDATA (UseChip)
	EXTRN	CODE (ClearRcvBuf)
	EXTRN	CODE (_putlenbuf)
	EXTRN	XDATA (NowFileName)
	EXTRN	XDATA (ADDR17_24)
	EXTRN	CODE (com_initialize)
	EXTRN	CODE (EraseFlash)
	EXTRN	CODE (_sprintf)
	EXTRN	DATA (?_sprintf?BYTE)
	EXTRN	XDATA (rdata_buffer)
	EXTRN	XDATA (FileNumber)
	EXTRN	XDATA (wdata_buffer)
	EXTRN	CODE (FindFlash)
	EXTRN	XDATA (FlashChip)
	EXTRN	CODE (FindFiles)
	EXTRN	CODE (_putbuf)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	tmpBuf
	PUBLIC	tmpcount
	PUBLIC	ProcessCommand
	PUBLIC	GetCommand
	PUBLIC	main

	RSEG  ?DT?main?MAIN
?main?BYTE:
          c?040:   DS   1
          i?041:   DS   2
 nWritePage?042:   DS   4

	RSEG  ?DT?ProcessCommand?MAIN
?ProcessCommand?BYTE:
          i?244:   DS   2
   filename?245:   DS   1

	RSEG  ?DT?GetCommand?MAIN
?GetCommand?BYTE:
          c?143:   DS   1

	RSEG  ?XD?MAIN
       tmpcount:   DS   2
         tmpBuf:   DS   40

	RSEG  ?CO?MAIN
?SC_0:
	DB  '#' ,'#' ,'#' ,'R' ,'u' ,'n' ,'n' ,'i' ,'n' ,'g' 
	DB  ' ' ,'O' ,'K' ,00DH,00AH,000H

?SC_16:
	DB  '#' ,'#' ,'#' ,'F' ,'i' ,'n' ,'d' ,' ' ,'O' ,'K' 
	DB  00DH,00AH,000H

?SC_29:
	DB  '#' ,'#' ,'#' ,'C' ,'h' ,'i' ,'p' ,' ' ,'%' ,'d' 
	DB  ' ' ,'r' ,'e' ,'t' ,'u' ,'r' ,'n' ,' ' ,'i' ,'s' 
	DB  ' ' ,'%' ,'c' ,00DH,00AH,000H

?SC_55:
	DB  '#' ,'#' ,'#' ,'R' ,'e' ,'c' ,'o' ,'r' ,'d' ,'i' 
	DB  'n' ,'g' ,'.' ,'.' ,'.' ,00DH,00AH,000H

?SC_73:
	DB  'd' ,'m' ,00DH,00AH,000H

?SC_78:
	DB  'e' ,'m' ,',' ,',' ,'j' ,'p' ,'s' ,':' ,'0' ,'.' 
	DB  '0' ,'5' ,00DH,00AH,000H

?SC_93:
	DB  '#' ,'#' ,'#' ,'W' ,'r' ,'i' ,'t' ,'e' ,' ' ,'e' 
	DB  'r' ,'r' ,'o' ,'r' ,':' ,' ' ,'F' ,'i' ,'l' ,'e' 
	DB  ' ' ,'n' ,'u' ,'m' ,'b' ,'e' ,'r' ,' ' ,'o' ,'v' 
	DB  'e' ,'r' ,' ' ,'2' ,'5' ,'5' ,00DH,00AH,000H

?SC_132:
	DB  '#' ,'#' ,'#' ,'W' ,'r' ,'i' ,'t' ,'e' ,' ' ,'e' 
	DB  'r' ,'r' ,'o' ,'r' ,':' ,' ' ,'N' ,'o' ,' ' ,'F' 
	DB  'l' ,'a' ,'s' ,'h' ,' ' ,'S' ,'p' ,'a' ,'c' ,'e' 
	DB  00DH,00AH,000H

?SC_165:
	DB  '#' ,'#' ,'#' ,'R' ,'e' ,'a' ,'d' ,' ' ,'O' ,'K' 
	DB  00DH,00AH,000H

?SC_178:
	DB  '#' ,'#' ,'#' ,'R' ,'e' ,'t' ,'u' ,'r' ,'n' ,00DH
	DB  00AH,000H

?SC_190:
	DB  'r' ,'e' ,'a' ,'l' ,'l' ,'y' ,' ' ,'c' ,'l' ,'e' 
	DB  'a' ,'r' ,'?' ,00DH,00AH,000H

?SC_206:
	DB  'E' ,'r' ,'a' ,'s' ,'e' ,' ' ,'f' ,'l' ,'a' ,'s' 
	DB  'h' ,'.' ,'.' ,'.' ,00DH,00AH,000H

?SC_223:
	DB  'E' ,'r' ,'a' ,'s' ,'e' ,' ' ,'O' ,'K' ,'!' ,00DH
	DB  00AH,000H

?SC_235:
	DB  'U' ,'n' ,'k' ,'n' ,'o' ,'w' ,'n' ,' ' ,'C' ,'o' 
	DB  'm' ,'m' ,'a' ,'n' ,'d' ,00DH,00AH,000H


	RSEG  ?C_INITSEG
	DB	042H
	DW	tmpcount
	DW	00000H

; #include <stdio.h>
; #include <string.h>
; #include "com.h"
; #include "flash.h"
; 
; int GetCommand();
; int ProcessCommand();
; //Main C function that start the interrupt-driven serial I/O.
; unsigned char xdata tmpBuf[40];
; int xdata tmpcount = 0;
; 
; void main (void) 

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 12
; {	
			; SOURCE LINE # 13
; 	unsigned char c;
; 	int i;	
; 	unsigned long int nWritePage = 0;
			; SOURCE LINE # 16
	CLR  	A
	MOV  	nWritePage?042+03H,A
	MOV  	nWritePage?042+02H,A
	MOV  	nWritePage?042+01H,A
	MOV  	nWritePage?042,A
; 	// 系统初始化
; 	AUXR = 0x01;		//setup ex_ram 8K
			; SOURCE LINE # 18
	MOV  	AUXR,#01H
; 	EA = 1; /* enable global interrupts */
			; SOURCE LINE # 19
	SETB 	EA
; 	com_initialize (); /* initialize interrupt driven serial I/O */
			; SOURCE LINE # 20
	LCALL	com_initialize
; 	
; 	putbuf("###Running OK\r\n");//向上位机发送数据
			; SOURCE LINE # 22
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_putbuf
; 	
; 	// 确定flash片数
; 	InitFlash();
			; SOURCE LINE # 25
	LCALL	InitFlash
; 	FindFlash();
			; SOURCE LINE # 26
	LCALL	FindFlash
; 	putbuf("###Find OK\r\n");//向上位机发送数据
			; SOURCE LINE # 27
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_16)
	MOV  	R1,#LOW (?SC_16)
	LCALL	_putbuf
; 	
; 	for(i = 0 ; i <6 ; i++)
			; SOURCE LINE # 29
	CLR  	A
	MOV  	i?041,A
	MOV  	i?041+01H,A
?C0001:
; 	{
			; SOURCE LINE # 30
; 		sprintf(tmpBuf,"###Chip %d return is %c\r\n",i,FlashChip[i]);
			; SOURCE LINE # 31
	MOV  	?_sprintf?BYTE+03H,#0FFH
	MOV  	?_sprintf?BYTE+04H,#HIGH (?SC_29)
	MOV  	?_sprintf?BYTE+05H,#LOW (?SC_29)
	MOV  	?_sprintf?BYTE+06H,i?041
	MOV  	?_sprintf?BYTE+07H,i?041+01H
	MOV  	A,#LOW (FlashChip)
	ADD  	A,i?041+01H
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	?_sprintf?BYTE+08H,A
	MOV  	R3,#01H
	MOV  	R2,#HIGH (tmpBuf)
	MOV  	R1,#LOW (tmpBuf)
	LCALL	_sprintf
; 		putbuf(tmpBuf);
			; SOURCE LINE # 32
	MOV  	R3,#01H
	MOV  	R2,#HIGH (tmpBuf)
	MOV  	R1,#LOW (tmpBuf)
	LCALL	_putbuf
; 	}	
			; SOURCE LINE # 33
	INC  	i?041+01H
	MOV  	A,i?041+01H
	JNZ  	?C0065
	INC  	i?041
?C0065:
	CLR  	C
	SUBB 	A,#06H
	MOV  	A,i?041
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0001
?C0002:
; 
; 	// 检查状态(记录或发送)
; 	if(P27 == 1)		//Contorl define 1 :recorde data 0:read data
			; SOURCE LINE # 36
	JB   	P27,$ + 6H
	LJMP 	?C0004
; 	{
			; SOURCE LINE # 37
; 		putbuf("###Recording...\r\n");
			; SOURCE LINE # 38
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_55)
	MOV  	R1,#LOW (?SC_55)
	LCALL	_putbuf
; 		// 查找数据写入地址并确定新文件名
; 		FindEnd();	
			; SOURCE LINE # 40
	LCALL	FindEnd
; 		// 初始化文件参数
; 		wparameter_buffer[0] = 0xAA;
			; SOURCE LINE # 42
	MOV  	DPTR,#wparameter_buffer
	MOV  	A,#0AAH
	MOVX 	@DPTR,A
; 		wparameter_buffer[1] = NowFileName;		
			; SOURCE LINE # 43
	MOV  	DPTR,#NowFileName
	MOVX 	A,@DPTR
	MOV  	DPTR,#wparameter_buffer+01H
	MOVX 	@DPTR,A
; 		wparameter_buffer[2] = UseChip;
			; SOURCE LINE # 44
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	DPTR,#wparameter_buffer+02H
	MOVX 	@DPTR,A
; 		wparameter_buffer[3] = ADDR9_16;
			; SOURCE LINE # 45
	MOV  	DPTR,#ADDR9_16
	MOVX 	A,@DPTR
	MOV  	DPTR,#wparameter_buffer+03H
	MOVX 	@DPTR,A
; 		wparameter_buffer[4] = ADDR17_24;
			; SOURCE LINE # 46
	MOV  	DPTR,#ADDR17_24
	MOVX 	A,@DPTR
	MOV  	DPTR,#wparameter_buffer+04H
	MOVX 	@DPTR,A
; 		wparameter_buffer[5] = ADDR25;
			; SOURCE LINE # 47
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	MOV  	DPTR,#wparameter_buffer+05H
	MOVX 	@DPTR,A
; 		// disable GPS output
; 		putbuf("dm\r\n");
			; SOURCE LINE # 49
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_73)
	MOV  	R1,#LOW (?SC_73)
	LCALL	_putbuf
; 		for(i=0; i<1000; i++);
			; SOURCE LINE # 50
	CLR  	A
	MOV  	i?041,A
	MOV  	i?041+01H,A
?C0005:
	INC  	i?041+01H
	MOV  	A,i?041+01H
	JNZ  	?C0066
	INC  	i?041
?C0066:
	CJNE 	A,#0E8H,?C0005
	MOV  	A,i?041
	CJNE 	A,#03H,?C0005
?C0006:
; 		ClearRcvBuf();
			; SOURCE LINE # 51
	LCALL	ClearRcvBuf
; 		// enable GPS output
; 		putbuf("em,,jps:0.05\r\n");
			; SOURCE LINE # 53
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_78)
	MOV  	R1,#LOW (?SC_78)
	LCALL	_putbuf
?C0008:
; 		// 数据记录
; 		while (1) 
			; SOURCE LINE # 55
; 		{
			; SOURCE LINE # 56
; 			if(GetKey (&c) ==1)//处理接收缓冲区数据
			; SOURCE LINE # 57
	MOV  	R3,#00H
	MOV  	R2,#HIGH (c?040)
	MOV  	R1,#LOW (c?040)
	LCALL	_GetKey
	CJNE 	R7,#01H,?C0008
; 			{
			; SOURCE LINE # 58
; 				wdata_buffer[tmpcount] = c;
			; SOURCE LINE # 59
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ADD  	A,#LOW (wdata_buffer)
	MOV  	DPL,A
	MOV  	A,#HIGH (wdata_buffer)
	ADDC 	A,R6
	MOV  	DPH,A
	MOV  	A,c?040
	MOVX 	@DPTR,A
; 				tmpcount ++;
			; SOURCE LINE # 60
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0068
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0068:
; 				if(tmpcount == 512) {
			; SOURCE LINE # 61
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	CJNE 	A,#02H,?C0008
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,#00H,?C0008
; 					if(UseChip < MAXFLASH) {
			; SOURCE LINE # 62
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	CLR  	C
	SUBB 	A,#06H
	JNC  	?C0012
; 						if(NowFileName < MAXFILENUM) {
			; SOURCE LINE # 63
	MOV  	DPTR,#NowFileName
	MOVX 	A,@DPTR
	CLR  	C
	SUBB 	A,#0FH
	JNC  	?C0013
; 							if(wparameter_buffer[6] == 0xFF) {
			; SOURCE LINE # 64
	MOV  	DPTR,#wparameter_buffer+06H
	MOVX 	A,@DPTR
	CPL  	A
	JNZ  	?C0014
; 								wparameter_buffer[6] = 0;
			; SOURCE LINE # 65
	MOVX 	@DPTR,A
; 								if(wparameter_buffer[7] == 0xFF) {
			; SOURCE LINE # 66
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,#0FFH,?C0015
; 									wparameter_buffer[7] = 0;
			; SOURCE LINE # 67
	CLR  	A
	MOVX 	@DPTR,A
; 									if(wparameter_buffer[8] == 0xFF) {
			; SOURCE LINE # 68
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,#0FFH,?C0016
; 										wparameter_buffer[8] = 0;
			; SOURCE LINE # 69
	CLR  	A
	MOVX 	@DPTR,A
; 										wparameter_buffer[9] ++;
			; SOURCE LINE # 70
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
; 									}
			; SOURCE LINE # 71
	SJMP 	?C0019
?C0016:
; 									else
; 										wparameter_buffer[8]++;
			; SOURCE LINE # 73
	MOV  	DPTR,#wparameter_buffer+08H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
; 								}
			; SOURCE LINE # 74
	SJMP 	?C0019
?C0015:
; 								else
; 									wparameter_buffer[7]++;
			; SOURCE LINE # 76
	MOV  	DPTR,#wparameter_buffer+07H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
; 							}
			; SOURCE LINE # 77
	SJMP 	?C0019
?C0014:
; 							else
; 								wparameter_buffer[6]++;
			; SOURCE LINE # 79
	MOV  	DPTR,#wparameter_buffer+06H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0019:
; 							WriteOnePage();// 把缓冲的数据写入到flash
			; SOURCE LINE # 80
	LCALL	WriteOnePage
; 							
; 							nWritePage ++;
			; SOURCE LINE # 82
	MOV  	A,nWritePage?042+03H
	ADD  	A,#01H
	MOV  	nWritePage?042+03H,A
	CLR  	A
	ADDC 	A,nWritePage?042+02H
	MOV  	nWritePage?042+02H,A
	CLR  	A
	ADDC 	A,nWritePage?042+01H
	MOV  	nWritePage?042+01H,A
	CLR  	A
	ADDC 	A,nWritePage?042
	MOV  	nWritePage?042,A
; 							FindNextPage();							
			; SOURCE LINE # 83
	LCALL	FindNextPage
; 						}
			; SOURCE LINE # 84
	SJMP 	?C0021
?C0013:
; 						else
; 							putbuf("###Write error: File number over 255\r\n");
			; SOURCE LINE # 86
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_93)
	MOV  	R1,#LOW (?SC_93)
	LCALL	_putbuf
; 					}
			; SOURCE LINE # 87
	SJMP 	?C0021
?C0012:
; 					else
; 						putbuf("###Write error: No Flash Space\r\n");
			; SOURCE LINE # 89
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_132)
	MOV  	R1,#LOW (?SC_132)
	LCALL	_putbuf
?C0021:
; 					tmpcount = 0;
			; SOURCE LINE # 90
	CLR  	A
	MOV  	DPTR,#tmpcount
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; 				}
			; SOURCE LINE # 91
; 			}
			; SOURCE LINE # 92
; 		}
			; SOURCE LINE # 93
	LJMP 	?C0008
; 	}
			; SOURCE LINE # 94
?C0004:
; 	else
; 	{
			; SOURCE LINE # 96
; 		putbuf("###Read OK\r\n");
			; SOURCE LINE # 97
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_165)
	MOV  	R1,#LOW (?SC_165)
	LCALL	_putbuf
; 		// 查找现存文件个数
; 		FindFiles();
			; SOURCE LINE # 99
	LCALL	FindFiles
; 		tmpcount = 0;
			; SOURCE LINE # 100
	CLR  	A
	MOV  	DPTR,#tmpcount
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
?C0023:
; 		while(1) {
			; SOURCE LINE # 101
; 			if(GetCommand()) {
			; SOURCE LINE # 102
	LCALL	GetCommand
	MOV  	A,R7
	ORL  	A,R6
	JZ   	?C0023
; 				ProcessCommand();
			; SOURCE LINE # 103
	LCALL	ProcessCommand
; 			}
			; SOURCE LINE # 104
; 		}
			; SOURCE LINE # 105
	SJMP 	?C0023
; 	}
			; SOURCE LINE # 106
; }
			; SOURCE LINE # 107
?C0026:
	RET  	
; END OF main

; 
; int GetCommand()

	RSEG  ?PR?GetCommand?MAIN
GetCommand:
	USING	0
			; SOURCE LINE # 109
; {
			; SOURCE LINE # 110
; 	unsigned char c;
; 	if(GetKey (&c) ==1)//处理接收缓冲区数据
			; SOURCE LINE # 112
	MOV  	R3,#00H
	MOV  	R2,#HIGH (c?143)
	MOV  	R1,#LOW (c?143)
	LCALL	_GetKey
	MOV  	A,R7
	XRL  	A,#01H
	JZ   	$ + 5H
	LJMP 	?C0027
; 	{
			; SOURCE LINE # 113
; 		switch(tmpcount) {
			; SOURCE LINE # 114
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R6
	JZ   	$ + 5H
	LJMP 	?C0040
	MOV  	A,R7
	DEC  	A
	JZ   	?C0031
	ADD  	A,#0F8H
	JZ   	?C0034
	DEC  	A
	JNZ  	$ + 5H
	LJMP 	?C0037
	ADD  	A,#0AH
	JZ   	$ + 5H
	LJMP 	?C0040
; 		case 0:
			; SOURCE LINE # 115
?C0029:
; 			if(c == '#') {
			; SOURCE LINE # 116
	MOV  	A,c?143
	XRL  	A,#023H
	JZ   	$ + 5H
	LJMP 	?C0028
; 				tmpBuf[tmpcount] = c;
			; SOURCE LINE # 117
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	ADD  	A,#LOW (tmpBuf)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (tmpBuf)
	MOV  	DPH,A
	MOV  	A,c?143
	MOVX 	@DPTR,A
; 				tmpcount++;
			; SOURCE LINE # 118
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0070
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0070:
; 			}
			; SOURCE LINE # 119
; 			break;
			; SOURCE LINE # 120
	LJMP 	?C0028
; 		case 1:
			; SOURCE LINE # 121
?C0031:
; 			if(c == 'C') {
			; SOURCE LINE # 122
	MOV  	A,c?143
	CJNE 	A,#043H,?C0032
; 				tmpBuf[tmpcount] = c;
			; SOURCE LINE # 123
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	ADD  	A,#LOW (tmpBuf)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (tmpBuf)
	MOV  	DPH,A
	MOV  	A,c?143
	MOVX 	@DPTR,A
; 				tmpcount++;
			; SOURCE LINE # 124
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0028
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0071:
; 			}
			; SOURCE LINE # 125
	SJMP 	?C0028
?C0032:
; 			else
; 				tmpcount = 0;
			; SOURCE LINE # 127
	CLR  	A
	MOV  	DPTR,#tmpcount
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; 			break;
			; SOURCE LINE # 128
	SJMP 	?C0028
; 		case 9:
			; SOURCE LINE # 129
?C0034:
; 			if(c == 0x10) {
			; SOURCE LINE # 130
	MOV  	A,c?143
	CJNE 	A,#010H,?C0035
; 				tmpBuf[tmpcount] = c;
			; SOURCE LINE # 131
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	ADD  	A,#LOW (tmpBuf)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (tmpBuf)
	MOV  	DPH,A
	MOV  	A,c?143
	MOVX 	@DPTR,A
; 				tmpcount++;
			; SOURCE LINE # 132
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0028
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0072:
; 			}
			; SOURCE LINE # 133
	SJMP 	?C0028
?C0035:
; 			else
; 				tmpcount = 0;
			; SOURCE LINE # 135
	CLR  	A
	MOV  	DPTR,#tmpcount
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; 			break;
			; SOURCE LINE # 136
	SJMP 	?C0028
; 		case 10:
			; SOURCE LINE # 137
?C0037:
; 			tmpcount = 0;
			; SOURCE LINE # 138
	CLR  	A
	MOV  	DPTR,#tmpcount
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; 			if(c == 0x03) 
			; SOURCE LINE # 139
	MOV  	A,c?143
	CJNE 	A,#03H,?C0028
; 				return 1;
			; SOURCE LINE # 140
	MOV  	R6,#00H
	MOV  	R7,#01H
	RET  	
; 			break;
			; SOURCE LINE # 141
; 		default:
			; SOURCE LINE # 142
?C0040:
; 			tmpBuf[tmpcount] = c;
			; SOURCE LINE # 143
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	ADD  	A,#LOW (tmpBuf)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (tmpBuf)
	MOV  	DPH,A
	MOV  	A,c?143
	MOVX 	@DPTR,A
; 			tmpcount++;
			; SOURCE LINE # 144
	MOV  	DPTR,#tmpcount+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0073
	MOV  	DPTR,#tmpcount
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0073:
; 			break;
			; SOURCE LINE # 145
; 		}
			; SOURCE LINE # 146
?C0028:
; 		return 0;
			; SOURCE LINE # 147
	MOV  	R6,#00H
	MOV  	R7,#00H
	RET  	
; 	}
			; SOURCE LINE # 148
?C0027:
; 	else
; 		return 0;
			; SOURCE LINE # 150
	MOV  	R6,#00H
	MOV  	R7,#00H
; }
			; SOURCE LINE # 151
?C0039:
	RET  	
; END OF GetCommand

; 
; int ProcessCommand()

	RSEG  ?PR?ProcessCommand?MAIN
ProcessCommand:
	USING	0
			; SOURCE LINE # 153
; {
			; SOURCE LINE # 154
; 	int i;
; 	unsigned char filename;
; 
; 	// 下载指定扇区数据
; 	if(tmpBuf[2] == 0x05 && tmpBuf[3] == 0xFA) {
			; SOURCE LINE # 159
	MOV  	DPTR,#tmpBuf+02H
	MOVX 	A,@DPTR
	CJNE 	A,#05H,?C0042
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,#0FAH
	JNZ  	$ + 5H
	LJMP 	?ProcessCommand?next
; 		goto next;
			; SOURCE LINE # 160
; 	}
			; SOURCE LINE # 161
?C0042:
; 	// 返回接收到的命令
; 	putlenbuf("###Return\r\n", 11);
			; SOURCE LINE # 163
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_178)
	MOV  	R1,#LOW (?SC_178)
	MOV  	R5,#0BH
	MOV  	R4,#00H
	LCALL	_putlenbuf
; 
; 	// 处理收到的命令	
; 	if(tmpBuf[2] == 0x01 && tmpBuf[3] == 0xFE) {
			; SOURCE LINE # 166
	MOV  	DPTR,#tmpBuf+02H
	MOVX 	A,@DPTR
	XRL  	A,#01H
	JZ   	$ + 5H
	LJMP 	?C0044
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,#0FEH
	JZ   	$ + 5H
	LJMP 	?C0044
; 		tmpBuf[0] = '#';
			; SOURCE LINE # 167
	MOV  	DPTR,#tmpBuf
	MOV  	A,#023H
	MOVX 	@DPTR,A
; 		tmpBuf[1] = 'C';
			; SOURCE LINE # 168
	INC  	DPTR
	MOV  	A,#043H
	MOVX 	@DPTR,A
; 		// 上位机查询命令
; 		for(i=0; i<FileNumber; i++) {
			; SOURCE LINE # 170
	CLR  	A
	MOV  	i?244,A
	MOV  	i?244+01H,A
?C0045:
	MOV  	DPTR,#FileNumber
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	C
	MOV  	A,i?244+01H
	SUBB 	A,R7
	MOV  	A,#080H
	MOV  	R0,A
	XRL  	A,i?244
	SUBB 	A,R0
	JC   	$ + 5H
	LJMP 	?ProcessCommand?next
; 			tmpBuf[2] = i;
			; SOURCE LINE # 171
	MOV  	R1,i?244+01H
	MOV  	DPTR,#tmpBuf+02H
	MOV  	A,R1
	MOVX 	@DPTR,A
; 			tmpBuf[3] = FileSize[i][0];
			; SOURCE LINE # 172
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#tmpBuf+03H
	MOVX 	@DPTR,A
; 			tmpBuf[4] = FileSize[i][1];
			; SOURCE LINE # 173
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+04H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+04H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#tmpBuf+04H
	MOVX 	@DPTR,A
; 			tmpBuf[5] = FileSize[i][2];
			; SOURCE LINE # 174
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+08H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+08H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#tmpBuf+05H
	MOVX 	@DPTR,A
; 			tmpBuf[6] = FileSize[i][3];
			; SOURCE LINE # 175
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+0CH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+0CH)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#tmpBuf+06H
	MOVX 	@DPTR,A
; 			tmpBuf[7] = 0x10;
			; SOURCE LINE # 176
	INC  	DPTR
	MOV  	A,#010H
	MOVX 	@DPTR,A
; 			tmpBuf[8] = 0x03;
			; SOURCE LINE # 177
	INC  	DPTR
	MOV  	A,#03H
	MOVX 	@DPTR,A
; 			putlenbuf(tmpBuf, 9);
			; SOURCE LINE # 178
	MOV  	R3,#01H
	MOV  	R2,#HIGH (tmpBuf)
	MOV  	R1,#LOW (tmpBuf)
	MOV  	R5,#09H
	MOV  	R4,#00H
	LCALL	_putlenbuf
; 			for(i=0; i<1000; i++);
			; SOURCE LINE # 179
	CLR  	A
	MOV  	i?244,A
	MOV  	i?244+01H,A
?C0048:
	INC  	i?244+01H
	MOV  	A,i?244+01H
	JNZ  	?C0074
	INC  	i?244
?C0074:
	CJNE 	A,#0E8H,?C0048
	MOV  	A,i?244
	CJNE 	A,#03H,?C0048
; 		}
			; SOURCE LINE # 180
?C0047:
	INC  	i?244+01H
	MOV  	A,i?244+01H
	JNZ  	?C0076
	INC  	i?244
?C0076:
	LJMP 	?C0045
; 	}
			; SOURCE LINE # 181
?C0044:
; 	else if(tmpBuf[2] == 0x02 && tmpBuf[3] == 0xFD) {
			; SOURCE LINE # 182
	MOV  	DPTR,#tmpBuf+02H
	MOVX 	A,@DPTR
	CJNE 	A,#02H,?C0052
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,#0FDH,?C0052
; 		// 数据清除命令
; 		putbuf("really clear?\r\n");
			; SOURCE LINE # 184
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_190)
	MOV  	R1,#LOW (?SC_190)
	LCALL	_putbuf
; 	}
			; SOURCE LINE # 185
	LJMP 	?ProcessCommand?next
?C0052:
; 	else if(tmpBuf[2] == 0x03 && tmpBuf[3] == 0xFC) {
			; SOURCE LINE # 186
	MOV  	DPTR,#tmpBuf+02H
	MOVX 	A,@DPTR
	CJNE 	A,#03H,?C0054
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,#0FCH,?C0054
; 		// 数据清除确认命令
; 		putbuf("Erase flash...\r\n");
			; SOURCE LINE # 188
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_206)
	MOV  	R1,#LOW (?SC_206)
	LCALL	_putbuf
; 		EraseFlash();
			; SOURCE LINE # 189
	LCALL	EraseFlash
; 		putbuf("Erase OK!\r\n");
			; SOURCE LINE # 190
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_223)
	MOV  	R1,#LOW (?SC_223)
	LCALL	_putbuf
; 	}
			; SOURCE LINE # 191
	LJMP 	?ProcessCommand?next
?C0054:
; 	else if(tmpBuf[2] == 0x04 && tmpBuf[3] == 0xFB) {
			; SOURCE LINE # 192
	MOV  	DPTR,#tmpBuf+02H
	MOVX 	A,@DPTR
	XRL  	A,#04H
	JZ   	$ + 5H
	LJMP 	?C0056
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,#0FBH
	JZ   	$ + 5H
	LJMP 	?C0056
; 		// 上位机下载命令
; 		filename = tmpBuf[4];		
			; SOURCE LINE # 194
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	filename?245,A
; 		if(filename >= FileNumber || filename < 0)
			; SOURCE LINE # 195
	MOV  	DPTR,#FileNumber
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,filename?245
	CLR  	C
	SUBB 	A,R7
	JC   	$ + 5H
	LJMP 	?ProcessCommand?next
	MOV  	A,filename?245
	CLR  	C
	SUBB 	A,#00H
	JNC  	$ + 5H
	LJMP 	?ProcessCommand?next
; 			goto next;
			; SOURCE LINE # 196
?C0057:
; 
; 		UseChip = FileStart[filename][0];
			; SOURCE LINE # 198
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#UseChip
	MOVX 	@DPTR,A
; 		ADDR9_16 = FileStart[filename][1];
			; SOURCE LINE # 199
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+04H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+04H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#ADDR9_16
	MOVX 	@DPTR,A
; 		ADDR17_24 = FileStart[filename][2];
			; SOURCE LINE # 200
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+08H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+08H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#ADDR17_24
	MOVX 	@DPTR,A
; 		ADDR25 = FileStart[filename][3];
			; SOURCE LINE # 201
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0CH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0CH)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#ADDR25
	MOVX 	@DPTR,A
; 		ReadOnePage();
			; SOURCE LINE # 202
	LCALL	ReadOnePage
; 		putlenbuf(rdata_buffer, 512);
			; SOURCE LINE # 203
	MOV  	R3,#01H
	MOV  	R2,#HIGH (rdata_buffer)
	MOV  	R1,#LOW (rdata_buffer)
	MOV  	R5,#00H
	MOV  	R4,#02H
	LCALL	_putlenbuf
; 		UseChip = FileStart[filename][0];
			; SOURCE LINE # 204
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#UseChip
	MOVX 	@DPTR,A
; 		ADDR9_16 = FileStart[filename][1];
			; SOURCE LINE # 205
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+04H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+04H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#ADDR9_16
	MOVX 	@DPTR,A
; 		ADDR17_24 = FileStart[filename][2];
			; SOURCE LINE # 206
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+08H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+08H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#ADDR17_24
	MOVX 	@DPTR,A
; 		ADDR25 = FileStart[filename][3];
			; SOURCE LINE # 207
	MOV  	A,filename?245
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0CH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0CH)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#ADDR25
	MOVX 	@DPTR,A
; 		FindNextPage();
			; SOURCE LINE # 208
	LCALL	FindNextPage
; 		for(;;) {
			; SOURCE LINE # 209
?C0059:
; 			ReadOnePage();
			; SOURCE LINE # 210
	LCALL	ReadOnePage
; 			FindNextPage();			
			; SOURCE LINE # 211
	LCALL	FindNextPage
; 			if(rparameter_buffer[0] == 0xAA && filename == rparameter_buffer[1])
			; SOURCE LINE # 212
	MOV  	DPTR,#rparameter_buffer
	MOVX 	A,@DPTR
	CJNE 	A,#0AAH,?ProcessCommand?next
	INC  	DPTR
	MOVX 	A,@DPTR
	CJNE 	A,filename?245,?ProcessCommand?next
; 				putlenbuf(rdata_buffer, 512);
			; SOURCE LINE # 213
	MOV  	R3,#01H
	MOV  	R2,#HIGH (rdata_buffer)
	MOV  	R1,#LOW (rdata_buffer)
	MOV  	R5,#00H
	MOV  	R4,#02H
	LCALL	_putlenbuf
	SJMP 	?C0059
; 			else
; 				break;
			; SOURCE LINE # 215
; 		}
			; SOURCE LINE # 216
; 	}
			; SOURCE LINE # 217
?C0056:
; 	else {
			; SOURCE LINE # 218
; 		// 不能识别的命令
; 		putbuf("Unknown Command\r\n");
			; SOURCE LINE # 220
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_235)
	MOV  	R1,#LOW (?SC_235)
	LCALL	_putbuf
; 	}
			; SOURCE LINE # 221
; 
; next:
			; SOURCE LINE # 223
?ProcessCommand?next:
; 	// 清除串口数据和命令缓冲
; 	tmpcount = 0;
			; SOURCE LINE # 225
	CLR  	A
	MOV  	DPTR,#tmpcount
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; 	ClearRcvBuf();
			; SOURCE LINE # 226
	LCALL	ClearRcvBuf
; 	return 1;
			; SOURCE LINE # 227
	MOV  	R6,#00H
	MOV  	R7,#01H
; }
			; SOURCE LINE # 228
?C0064:
	RET  	
; END OF ProcessCommand

	END
