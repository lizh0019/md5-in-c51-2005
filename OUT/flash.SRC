; .\OUT\flash.SRC generated from: .\flash.c

$NOMOD51

NAME	FLASH

CCF2	BIT	0C0H.2
CCF3	BIT	0C0H.3
P0	DATA	080H
CCF4	BIT	0C0H.4
P1	DATA	090H
P2	DATA	0A0H
AA	BIT	0D8H.2
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
T2	BIT	090H.0
EC	BIT	0A8H.6
CF	BIT	0C0H.7
CH	DATA	0F9H
FE	BIT	098H.7
IEN0	DATA	0A8H
IEN1	DATA	0E8H
CL	DATA	0E9H
CCAP0H	DATA	0FAH
CEX0	BIT	090H.3
CCAP1H	DATA	0FBH
CEX1	BIT	090H.4
CCAP2H	DATA	0FCH
CP	BIT	0C8H.0
CEX2	BIT	090H.5
CCAP3H	DATA	0FDH
CCAP4H	DATA	0FEH
CCAP0L	DATA	0EAH
CR	BIT	0C0H.6
CCAP1L	DATA	0EBH
CCAPM0	DATA	0C2H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
CCAP2L	DATA	0ECH
CCAPM1	DATA	0C3H
CCAP3L	DATA	0EDH
CCAPM2	DATA	0C4H
ENS1	BIT	0D8H.6
CCAP4L	DATA	0EEH
CCAPM3	DATA	0C5H
UD	BIT	0D0H.1
IP	DATA	0B8H
CCAPM4	DATA	0C6H
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
SI	BIT	0D8H.3
INT1	BIT	0B0H.3
TI	BIT	098H.1
IE0_	BIT	088H.1
IE1_	BIT	088H.3
RCAP2H	DATA	0CBH
SP	DATA	081H
CMOD	DATA	0C1H
CCON	DATA	0C0H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
P10	BIT	090H.0
PCON	DATA	087H
P20	BIT	0A0H.0
P11	BIT	090H.1
P21	BIT	0A0H.1
P12	BIT	090H.2
P22	BIT	0A0H.2
P13	BIT	090H.3
P23	BIT	0A0H.3
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
AD0	BIT	080H.0
P24	BIT	0A0H.4
P15	BIT	090H.5
AD1	BIT	080H.1
P25	BIT	0A0H.5
P16	BIT	090H.6
AD2	BIT	080H.2
P26	BIT	0A0H.6
P17	BIT	090H.7
AD3	BIT	080H.3
P27	BIT	0A0H.7
AD4	BIT	080H.4
AD5	BIT	080H.5
AD6	BIT	080H.6
AD7	BIT	080H.7
AD8	BIT	0A0H.0
AD9	BIT	0A0H.1
AUXR	DATA	08EH
B	DATA	0F0H
CR0	BIT	0D8H.0
CR1	BIT	0D8H.1
ACC	DATA	0E0H
CR2	BIT	0D8H.7
ES0	BIT	0A8H.4
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ES1	BIT	0A8H.5
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0E8H.0
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
TH1	DATA	08DH
IT0	BIT	088H.0
TH2	DATA	0CDH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
ECI	BIT	090H.2
TL1	DATA	08BH
TL2	DATA	0CCH
SM2	BIT	098H.5
PS0	BIT	0B8H.4
PT0	BIT	0B8H.2
PS1	BIT	0B8H.5
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.7
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.2
SDA	BIT	090H.7
PX1	BIT	0B8H.2
S1ADR	DATA	0DBH
DPH	DATA	083H
S1DAT	DATA	0DAH
DPL	DATA	082H
IPH	DATA	0B7H
SCL	BIT	090H.6
EXEN2	BIT	0C8H.3
PPC	BIT	0B8H.6
S0CON	DATA	098H
REN	BIT	098H.4
S1CON	DATA	0D8H
AD10	BIT	0A0H.2
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
AD11	BIT	0A0H.3
AD12	BIT	0A0H.4
STA	BIT	0D8H.5
AD13	BIT	0A0H.5
WDTRST	DATA	0A6H
AD14	BIT	0A0H.6
AD15	BIT	0A0H.7
SADEN	DATA	0B9H
S1STA	DATA	0D9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
AUXR1	DATA	0A2H
S1IST	DATA	0DCH
F0	BIT	0D0H.5
STO	BIT	0D8H.4
PSW	DATA	0D0H
CCF0	BIT	0C0H.0
CCF1	BIT	0C0H.1
?PR?FindNextPage?FLASH                   SEGMENT CODE 
?PR?_FindPrvPage?FLASH                   SEGMENT CODE 
?DT?_FindPrvPage?FLASH                   SEGMENT DATA OVERLAYABLE 
?PR?FindEnd?FLASH    SEGMENT CODE 
?DT?FindEnd?FLASH    SEGMENT DATA OVERLAYABLE 
?PR?FindFiles?FLASH  SEGMENT CODE 
?DT?FindFiles?FLASH  SEGMENT DATA OVERLAYABLE 
?PR?InitFlash?FLASH  SEGMENT CODE 
?PR?FindFlash?FLASH  SEGMENT CODE 
?DT?FindFlash?FLASH  SEGMENT DATA OVERLAYABLE 
?PR?EraseFlash?FLASH SEGMENT CODE 
?DT?EraseFlash?FLASH SEGMENT DATA OVERLAYABLE 
?PR?_EraseOneFlash?FLASH                 SEGMENT CODE 
?DT?_EraseOneFlash?FLASH                 SEGMENT DATA OVERLAYABLE 
?PR?_WriteOnePage?FLASH                  SEGMENT CODE 
?DT?_WriteOnePage?FLASH                  SEGMENT DATA OVERLAYABLE 
?PR?_ReadOnePage?FLASH                   SEGMENT CODE 
?DT?_ReadOnePage?FLASH                   SEGMENT DATA OVERLAYABLE 
?XD?FLASH            SEGMENT XDATA 
	EXTRN	CODE (?C?LSTXDATA)
	PUBLIC	FlashChip
	PUBLIC	wdata_buffer
	PUBLIC	FileNumber
	PUBLIC	rdata_buffer
	PUBLIC	ADDR17_24
	PUBLIC	NowFileName
	PUBLIC	UseChip
	PUBLIC	FileSize
	PUBLIC	wparameter_buffer
	PUBLIC	ADDR9_16
	PUBLIC	rparameter_buffer
	PUBLIC	FileStart
	PUBLIC	ADDR25
	PUBLIC	ErrorFlash
	PUBLIC	?_ReadOnePage?BYTE
	PUBLIC	_ReadOnePage
	PUBLIC	?_WriteOnePage?BYTE
	PUBLIC	_WriteOnePage
	PUBLIC	_EraseOneFlash
	PUBLIC	EraseFlash
	PUBLIC	FindFlash
	PUBLIC	InitFlash
	PUBLIC	FindFiles
	PUBLIC	FindEnd
	PUBLIC	?_FindPrvPage?BYTE
	PUBLIC	_FindPrvPage
	PUBLIC	FindNextPage

	RSEG  ?DT?_ReadOnePage?FLASH
?_WriteOnePage?BYTE:
       chip?970:   DS   2
   addr9_16?971:   DS   1
  addr17_24?972:   DS   1

	RSEG  ?DT?_WriteOnePage?FLASH
?_EraseOneFlash?BYTE:
       chip?862:   DS   2
   addr9_16?863:   DS   1
  addr17_24?864:   DS   1

	RSEG  ?DT?_FindPrvPage?FLASH
       chip?142:   DS   2
   addr9_16?143:   DS   1
  addr17_24?144:   DS   1

	RSEG  ?DT?EraseFlash?FLASH
          m?553:   DS   2

	RSEG  ?DT?_EraseOneFlash?FLASH
          i?654:   DS   2

	RSEG  ?XD?FLASH
     ErrorFlash:   DS   2
         ADDR25:   DS   1
      FileStart:   DS   240
rparameter_buffer:   DS   16
       ADDR9_16:   DS   1
wparameter_buffer:   DS   16
       FileSize:   DS   240
        UseChip:   DS   1
    NowFileName:   DS   1
      ADDR17_24:   DS   1
   rdata_buffer:   DS   512
     FileNumber:   DS   1
   wdata_buffer:   DS   512
      FlashChip:   DS   6
; #include "flash.h"
; #include <absacc.h>
; 
; //unsigned char status;				//flash status
; unsigned char xdata wdata_buffer[512];		//flash write data buffer
; unsigned char xdata wparameter_buffer[16];	//data parameter buffer
; unsigned char xdata rdata_buffer[512];		//flash read data buffer
; unsigned char xdata rparameter_buffer[16];	//data parameter buffer
; unsigned int  xdata ErrorFlash;
; 
; unsigned char xdata NowFileName; // 当前记录文件名称
; 
; unsigned long xdata FileStart[MAXFILENUM][4];//各文件的起始位置
; unsigned long xdata FileSize[MAXFILENUM][4]; // 各文件大小
; unsigned char xdata FileNumber;// 文件的数量
; 
; unsigned char xdata ADDR9_16;
; unsigned char xdata ADDR17_24;
; unsigned char xdata ADDR25;
; unsigned char xdata UseChip;
; 
; //if FlashChip[i] == 1 this chips exist else no this chip
; unsigned char xdata FlashChip[MAXFLASH];
; 
; int FindNextPage()

	RSEG  ?PR?FindNextPage?FLASH
FindNextPage:
	USING	0
			; SOURCE LINE # 25
; {
			; SOURCE LINE # 26
; 	int i;
; 	unsigned char chip;
; 	chip = UseChip;
			; SOURCE LINE # 29
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	R7,A
;---- Variable 'chip?041' assigned to Register 'R7' ----
; 	if(ADDR9_16 == 0xFF) {
			; SOURCE LINE # 30
	MOV  	DPTR,#ADDR9_16
	MOVX 	A,@DPTR
	CPL  	A
	JNZ  	?C0001
; 		if(ADDR17_24 == 0xFF) {
			; SOURCE LINE # 31
	MOV  	DPTR,#ADDR17_24
	MOVX 	A,@DPTR
	CPL  	A
	JNZ  	?C0002
; 			if(ADDR25 >= 1) {
			; SOURCE LINE # 32
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	CLR  	C
	SUBB 	A,#01H
	JC   	?C0003
; 				for(i = chip+1; i < MAXFLASH ;i ++)
			; SOURCE LINE # 33
	MOV  	A,R7
	ADD  	A,#01H
	MOV  	R5,A
	CLR  	A
	RLC  	A
	MOV  	R4,A
;---- Variable 'i?040' assigned to Register 'R4/R5' ----
?C0004:
	CLR  	C
	MOV  	A,R5
	SUBB 	A,#06H
	MOV  	A,R4
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0005
; 				{
			; SOURCE LINE # 34
; 					if(FlashChip[i] == 0x40) {
			; SOURCE LINE # 35
	MOV  	A,#LOW (FlashChip)
	ADD  	A,R5
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	CJNE 	A,#040H,?C0006
; 						UseChip = i;
			; SOURCE LINE # 36
	MOV  	DPTR,#UseChip
	MOV  	A,R5
	MOVX 	@DPTR,A
; 						break;
			; SOURCE LINE # 37
	SJMP 	?C0005
; 					}
			; SOURCE LINE # 38
; 				}
			; SOURCE LINE # 39
?C0006:
	INC  	R5
	CJNE 	R5,#00H,?C0123
	INC  	R4
?C0123:
	SJMP 	?C0004
?C0005:
; 				// 如果找不到下一个flash
; 				if(UseChip == chip) {
			; SOURCE LINE # 41
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	CJNE 	A,AR7,?C0008
; 					UseChip = MAXFLASH;
			; SOURCE LINE # 42
	MOV  	A,#06H
	MOVX 	@DPTR,A
; 					return 0;
			; SOURCE LINE # 43
	MOV  	R6,#00H
	MOV  	R7,#00H
	RET  	
; 				}
			; SOURCE LINE # 44
?C0008:
; 				ADDR25 = 0;
			; SOURCE LINE # 45
	CLR  	A
	MOV  	DPTR,#ADDR25
	MOVX 	@DPTR,A
; 			}
			; SOURCE LINE # 46
	SJMP 	?C0010
?C0003:
; 			else
; 				ADDR25++;
			; SOURCE LINE # 48
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0010:
; 			ADDR17_24 = 0;
			; SOURCE LINE # 49
	CLR  	A
	MOV  	DPTR,#ADDR17_24
	MOVX 	@DPTR,A
; 		}
			; SOURCE LINE # 50
	SJMP 	?C0011
?C0002:
; 		else
; 			ADDR17_24++;
			; SOURCE LINE # 52
	MOV  	DPTR,#ADDR17_24
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0011:
; 		ADDR9_16 = 0;
			; SOURCE LINE # 53
	CLR  	A
	MOV  	DPTR,#ADDR9_16
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 54
	SJMP 	?C0012
?C0001:
; 	else
; 		ADDR9_16++;
			; SOURCE LINE # 56
	MOV  	DPTR,#ADDR9_16
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0012:
; 
; 	return 1;
			; SOURCE LINE # 58
	MOV  	R6,#00H
	MOV  	R7,#01H
; }
			; SOURCE LINE # 59
?C0009:
	RET  	
; END OF FindNextPage

; 
; int FindPrvPage(int chip,unsigned char addr9_16,unsigned char addr17_24,unsigned char addr25)

	RSEG  ?PR?_FindPrvPage?FLASH
_FindPrvPage:
	USING	0
	MOV  	chip?142,R6
	MOV  	chip?142+01H,R7
;---- Variable 'addr9_16?143' assigned to Register 'R5' ----
;---- Variable 'addr17_24?144' assigned to Register 'R3' ----
			; SOURCE LINE # 61
; {
			; SOURCE LINE # 62
; 	int i;	
; 	UseChip = chip;
			; SOURCE LINE # 64
	MOV  	DPTR,#UseChip
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	ADDR9_16 = addr9_16;
			; SOURCE LINE # 65
	MOV  	DPTR,#ADDR9_16
	MOV  	A,R5
	MOVX 	@DPTR,A
; 	ADDR17_24 = addr17_24;
			; SOURCE LINE # 66
	MOV  	DPTR,#ADDR17_24
	MOV  	A,R3
	MOVX 	@DPTR,A
; 	ADDR25 = addr25;
			; SOURCE LINE # 67
	MOV  	DPTR,#ADDR25
	MOV  	A,addr25?145
	MOVX 	@DPTR,A
; 	if(addr9_16 == 0) {
			; SOURCE LINE # 68
	MOV  	A,R5
	JNZ  	?C0013
; 		if(addr17_24 == 0) {
			; SOURCE LINE # 69
	MOV  	A,R3
	JNZ  	?C0014
; 			if(addr25 == 0) {
			; SOURCE LINE # 70
	MOV  	A,addr25?145
	JNZ  	?C0015
; 				for(i = chip-1; i >=0 ;i--)
			; SOURCE LINE # 71
	MOV  	A,chip?142+01H
	ADD  	A,#0FFH
	MOV  	R7,A
	MOV  	A,chip?142
	ADDC 	A,#0FFH
	MOV  	R6,A
;---- Variable 'i?146' assigned to Register 'R6/R7' ----
?C0016:
	CLR  	C
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0017
; 				{
			; SOURCE LINE # 72
; 					if(FlashChip[i] == 0x40) {
			; SOURCE LINE # 73
	MOV  	A,#LOW (FlashChip)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	CJNE 	A,#040H,?C0018
; 						UseChip = i;
			; SOURCE LINE # 74
	MOV  	DPTR,#UseChip
	MOV  	A,R7
	MOVX 	@DPTR,A
; 						break;
			; SOURCE LINE # 75
	SJMP 	?C0017
; 					}
			; SOURCE LINE # 76
; 				}
			; SOURCE LINE # 77
?C0018:
	MOV  	A,R7
	DEC  	R7
	JNZ  	?C0016
	DEC  	R6
?C0124:
	SJMP 	?C0016
?C0017:
; 				// 如果找不到下一个flash
; 				if(UseChip == chip) {
			; SOURCE LINE # 79
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	CJNE 	A,chip?142+01H,?C0020
	CLR  	A
	CJNE 	A,chip?142,?C0020
; 					UseChip = MAXFLASH;
			; SOURCE LINE # 80
	MOV  	A,#06H
	MOVX 	@DPTR,A
; 					return 0;
			; SOURCE LINE # 81
	MOV  	R6,#00H
	MOV  	R7,#00H
	RET  	
; 				}
			; SOURCE LINE # 82
?C0020:
; 				ADDR25 = 0xFF;
			; SOURCE LINE # 83
	MOV  	DPTR,#ADDR25
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 			}
			; SOURCE LINE # 84
	SJMP 	?C0022
?C0015:
; 			else
; 				ADDR25--;
			; SOURCE LINE # 86
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	DEC  	A
	MOVX 	@DPTR,A
?C0022:
; 			ADDR17_24 = 0xFF;
			; SOURCE LINE # 87
	MOV  	DPTR,#ADDR17_24
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		}
			; SOURCE LINE # 88
	SJMP 	?C0023
?C0014:
; 		else
; 			ADDR17_24--;
			; SOURCE LINE # 90
	MOV  	DPTR,#ADDR17_24
	MOVX 	A,@DPTR
	DEC  	A
	MOVX 	@DPTR,A
?C0023:
; 		ADDR9_16 = 0xFF;
			; SOURCE LINE # 91
	MOV  	DPTR,#ADDR9_16
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 92
	SJMP 	?C0024
?C0013:
; 	else
; 		ADDR9_16--;
			; SOURCE LINE # 94
	MOV  	DPTR,#ADDR9_16
	MOVX 	A,@DPTR
	DEC  	A
	MOVX 	@DPTR,A
?C0024:
; 
; 	return 1;
			; SOURCE LINE # 96
	MOV  	R6,#00H
	MOV  	R7,#01H
; }
			; SOURCE LINE # 97
?C0021:
	RET  	
; END OF _FindPrvPage

; 
; void FindEnd()

	RSEG  ?PR?FindEnd?FLASH
FindEnd:
	USING	0
			; SOURCE LINE # 99
; {
			; SOURCE LINE # 100
; 	int i;
; 	int nFlashCount = 0;	
			; SOURCE LINE # 102
;---- Variable 'nFlashCount?248' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
; 	
; 	// 判断flash数量。如果为0则返回
; 	for(i = 0; i < MAXFLASH ;i ++)
			; SOURCE LINE # 105
	MOV  	i?247,A
	MOV  	i?247+01H,A
?C0025:
; 	{
			; SOURCE LINE # 106
; 		if(FlashChip[i] == 0x40) {
			; SOURCE LINE # 107
	MOV  	A,#LOW (FlashChip)
	ADD  	A,i?247+01H
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	CJNE 	A,#040H,?C0027
; 			nFlashCount++;
			; SOURCE LINE # 108
	INC  	R7
	CJNE 	R7,#00H,?C0126
	INC  	R6
?C0126:
; 			break;
			; SOURCE LINE # 109
	SJMP 	?C0026
; 		}
			; SOURCE LINE # 110
; 	}
			; SOURCE LINE # 111
?C0027:
	INC  	i?247+01H
	MOV  	A,i?247+01H
	JNZ  	?C0127
	INC  	i?247
?C0127:
	XRL  	A,#06H
	ORL  	A,i?247
	JNZ  	?C0025
?C0026:
; 	if(nFlashCount == 0) return;
			; SOURCE LINE # 112
	MOV  	A,R7
	ORL  	A,R6
	JNZ  	$ + 5H
	LJMP 	?C0030
?C0029:
; 	
; 	UseChip = -1;
			; SOURCE LINE # 114
	MOV  	DPTR,#UseChip
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 	// 查找UseChip
; 	for(i = 0; i < MAXFLASH ;i ++)
			; SOURCE LINE # 116
	CLR  	A
	MOV  	i?247,A
	MOV  	i?247+01H,A
?C0031:
; 	{
			; SOURCE LINE # 117
; 		if(FlashChip[i] == 0x40)
			; SOURCE LINE # 118
	MOV  	A,#LOW (FlashChip)
	ADD  	A,i?247+01H
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,#040H
	JNZ  	?C0033
; 		{			
			; SOURCE LINE # 119
; 			//FlashReady(i,unsigned char addr9_16,unsigned char addr17_24,unsigned char addr25)
; 			// 读flash第一个page
; 			ReadOnePage(i, 0, 0, 0);
			; SOURCE LINE # 122
	MOV  	?_ReadOnePage?BYTE+04H,A
	MOV  	R3,A
	MOV  	R5,A
	MOV  	R7,i?247+01H
	MOV  	R6,i?247
	LCALL	_ReadOnePage
; 			// 判断page是否已写文件.如果未写文件则退出
; 			if(rparameter_buffer[0] == 0xAA)
			; SOURCE LINE # 124
	MOV  	DPTR,#rparameter_buffer
	MOVX 	A,@DPTR
	CJNE 	A,#0AAH,?C0035
; 				UseChip = i;
			; SOURCE LINE # 125
	MOV  	DPTR,#UseChip
	MOV  	A,i?247+01H
	MOVX 	@DPTR,A
	SJMP 	?C0033
?C0035:
; 			else {
			; SOURCE LINE # 126
; 				// flash什么也没写，则返回
; 				if(UseChip == -1) {
			; SOURCE LINE # 128
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	CJNE 	A,#0FFH,?C0032
; 					UseChip = i;
			; SOURCE LINE # 129
	MOV  	A,i?247+01H
	MOVX 	@DPTR,A
	RET  	
; 					return;
; 				}
			; SOURCE LINE # 131
; 				break;
			; SOURCE LINE # 132
; 			}
			; SOURCE LINE # 133
; 		}
			; SOURCE LINE # 134
; 	}	
			; SOURCE LINE # 135
?C0033:
	INC  	i?247+01H
	MOV  	A,i?247+01H
	JNZ  	?C0128
	INC  	i?247
?C0128:
	CLR  	C
	SUBB 	A,#06H
	MOV  	A,i?247
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0031
?C0032:
; 	// 查找ADDR25
; 	ReadOnePage(UseChip, 0, 0, 1);
			; SOURCE LINE # 137
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	?_ReadOnePage?BYTE+04H,#01H
	CLR  	A
	MOV  	R3,A
	MOV  	R5,A
	LCALL	_ReadOnePage
; 	if(rparameter_buffer[0] == 0xAA)
			; SOURCE LINE # 138
	MOV  	DPTR,#rparameter_buffer
	MOVX 	A,@DPTR
	CJNE 	A,#0AAH,?C0038
; 		ADDR25 = 1;
			; SOURCE LINE # 139
	MOV  	DPTR,#ADDR25
	MOV  	A,#01H
	MOVX 	@DPTR,A
?C0038:
; 	
; 	// 查找ADDR17_24
; 	for(i=0; i<=0xFF; i++)
			; SOURCE LINE # 142
	CLR  	A
	MOV  	i?247,A
	MOV  	i?247+01H,A
?C0039:
; 	{
			; SOURCE LINE # 143
; 		ReadOnePage(UseChip, 0, i, ADDR25);
			; SOURCE LINE # 144
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	R3,i?247+01H
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	MOV  	?_ReadOnePage?BYTE+04H,A
	CLR  	A
	MOV  	R5,A
	LCALL	_ReadOnePage
; 		// 判断page是否已写文件.如果未写文件则退出
; 		if(rparameter_buffer[0] == 0xAA)
			; SOURCE LINE # 146
	MOV  	DPTR,#rparameter_buffer
	MOVX 	A,@DPTR
	CJNE 	A,#0AAH,?C0040
; 			ADDR17_24 = i;
			; SOURCE LINE # 147
	MOV  	DPTR,#ADDR17_24
	MOV  	A,i?247+01H
	MOVX 	@DPTR,A
; 		else
; 			break;
			; SOURCE LINE # 149
; 	}
			; SOURCE LINE # 150
?C0041:
	INC  	i?247+01H
	MOV  	A,i?247+01H
	JNZ  	?C0129
	INC  	i?247
?C0129:
	SETB 	C
	SUBB 	A,#0FFH
	MOV  	A,i?247
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0039
?C0040:
; 
; 	// 查找ADDR9_16
; 	for(i=0; i<=0xFF; i++)
			; SOURCE LINE # 153
	CLR  	A
	MOV  	i?247,A
	MOV  	i?247+01H,A
?C0044:
; 	{
			; SOURCE LINE # 154
; 		ReadOnePage(UseChip, i, ADDR17_24, ADDR25);
			; SOURCE LINE # 155
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	R5,i?247+01H
	LCALL	L?0150
; 		// 判断page是否已写文件.如果未写文件则退出
; 		if(rparameter_buffer[0] == 0xAA)
			; SOURCE LINE # 157
	MOV  	DPTR,#rparameter_buffer
	MOVX 	A,@DPTR
	CJNE 	A,#0AAH,?C0045
; 			ADDR9_16 = i;
			; SOURCE LINE # 158
	MOV  	DPTR,#ADDR9_16
	MOV  	A,i?247+01H
	MOVX 	@DPTR,A
; 		else
; 			break;
			; SOURCE LINE # 160
; 	}
			; SOURCE LINE # 161
?C0046:
	INC  	i?247+01H
	MOV  	A,i?247+01H
	JNZ  	?C0130
	INC  	i?247
?C0130:
	SETB 	C
	SUBB 	A,#0FFH
	MOV  	A,i?247
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0044
?C0045:
; 
; 	// 确定新文件名
; 	ReadOnePage(UseChip, ADDR9_16, ADDR17_24, ADDR25);
			; SOURCE LINE # 164
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	DPTR,#ADDR9_16
	MOVX 	A,@DPTR
	MOV  	R5,A
	LCALL	L?0150
; 	NowFileName = rparameter_buffer[1];
			; SOURCE LINE # 165
	MOV  	DPTR,#rparameter_buffer+01H
	MOVX 	A,@DPTR
	MOV  	DPTR,#NowFileName
	MOVX 	@DPTR,A
; 	NowFileName ++;
			; SOURCE LINE # 166
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
; 
; 	// 确定现存文件个数
; 	FileNumber = NowFileName;
			; SOURCE LINE # 169
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#FileNumber
	MOVX 	@DPTR,A
	MOV  	R3,A
; 	// 保存最后一个文件的起始位置和大小
; 	FileStart[FileNumber-1][0] = rparameter_buffer[2];
			; SOURCE LINE # 171
	MOV  	DPTR,#rparameter_buffer+02H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0FFF0H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0FFF0H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileStart[FileNumber-1][1] = rparameter_buffer[3];
			; SOURCE LINE # 172
	MOV  	DPTR,#rparameter_buffer+03H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0FFF4H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0FFF4H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileStart[FileNumber-1][2] = rparameter_buffer[4];
			; SOURCE LINE # 173
	MOV  	DPTR,#rparameter_buffer+04H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0FFF8H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0FFF8H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileStart[FileNumber-1][3] = rparameter_buffer[5];
			; SOURCE LINE # 174
	MOV  	DPTR,#rparameter_buffer+05H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0FFFCH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0FFFCH)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileSize[FileNumber-1][0] = rparameter_buffer[6];
			; SOURCE LINE # 175
	MOV  	DPTR,#rparameter_buffer+06H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+0FFF0H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+0FFF0H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileSize[FileNumber-1][1] = rparameter_buffer[7];
			; SOURCE LINE # 176
	MOV  	DPTR,#rparameter_buffer+07H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+0FFF4H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+0FFF4H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileSize[FileNumber-1][2] = rparameter_buffer[8];
			; SOURCE LINE # 177
	MOV  	DPTR,#rparameter_buffer+08H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+0FFF8H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+0FFF8H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	FileSize[FileNumber-1][3] = rparameter_buffer[9];
			; SOURCE LINE # 178
	MOV  	DPTR,#rparameter_buffer+09H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+0FFFCH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+0FFFCH)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 
; 	// 查找下一个可以写入的页
; 	FindNextPage();
			; SOURCE LINE # 181
	LCALL	FindNextPage
; }
			; SOURCE LINE # 182
?C0030:
	RET  	
; END OF FindEnd

; 
; void FindFiles()

	RSEG  ?PR?FindFiles?FLASH
FindFiles:
	USING	0
			; SOURCE LINE # 184
; {
			; SOURCE LINE # 185
; 	int i;
; 	FindEnd();
			; SOURCE LINE # 187
	LCALL	FindEnd
; 	for(i=FileNumber-2; i>=0; i--) {		
			; SOURCE LINE # 188
	MOV  	DPTR,#FileNumber
	MOVX 	A,@DPTR
	ADD  	A,#0FEH
	MOV  	i?349+01H,A
	CLR  	A
	ADDC 	A,#0FFH
	MOV  	i?349,A
?C0049:
	CLR  	C
	MOV  	A,i?349
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	$ + 5H
	LJMP 	?C0052
; 		FindPrvPage(FileStart[i+1][0], FileStart[i+1][1], 
			; SOURCE LINE # 189
	MOV  	R1,i?349+01H
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+010H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+010H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	PUSH 	AR6
	PUSH 	AR7
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+014H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+014H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+018H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+018H)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	A,R1
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+01CH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+01CH)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	?_FindPrvPage?BYTE+04H,A
	MOV  	R5,AR2
	POP  	AR7
	POP  	AR6
	LCALL	_FindPrvPage
; 			FileStart[i+1][2], FileStart[i+1][3]);
; 		ReadOnePage(UseChip, ADDR9_16, ADDR17_24, ADDR25);
			; SOURCE LINE # 191
	MOV  	DPTR,#UseChip
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	DPTR,#ADDR9_16
	MOVX 	A,@DPTR
	MOV  	R5,A
	MOV  	DPTR,#ADDR17_24
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	MOV  	?_ReadOnePage?BYTE+04H,A
	LCALL	_ReadOnePage
; 		FileStart[i][0] = rparameter_buffer[2];
			; SOURCE LINE # 192
	MOV  	DPTR,#rparameter_buffer+02H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	R3,i?349+01H
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileStart[i][1] = rparameter_buffer[3];
			; SOURCE LINE # 193
	MOV  	DPTR,#rparameter_buffer+03H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+04H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+04H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileStart[i][2] = rparameter_buffer[4];
			; SOURCE LINE # 194
	MOV  	DPTR,#rparameter_buffer+04H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+08H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+08H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileStart[i][3] = rparameter_buffer[5];
			; SOURCE LINE # 195
	MOV  	DPTR,#rparameter_buffer+05H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileStart+0CH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileStart+0CH)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileSize[i][0] = rparameter_buffer[6];
			; SOURCE LINE # 196
	MOV  	DPTR,#rparameter_buffer+06H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileSize[i][1] = rparameter_buffer[7];
			; SOURCE LINE # 197
	MOV  	DPTR,#rparameter_buffer+07H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+04H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+04H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileSize[i][2] = rparameter_buffer[8];
			; SOURCE LINE # 198
	MOV  	DPTR,#rparameter_buffer+08H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+08H)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+08H)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 		FileSize[i][3] = rparameter_buffer[9];
			; SOURCE LINE # 199
	MOV  	DPTR,#rparameter_buffer+09H
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	R6,A
	MOV  	A,R3
	SWAP 	A
	ANL  	A,#0F0H
	ADD  	A,#LOW (FileSize+0CH)
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FileSize+0CH)
	MOV  	DPH,A
	LCALL	?C?LSTXDATA
; 	}
			; SOURCE LINE # 200
	MOV  	A,i?349+01H
	DEC  	i?349+01H
	JNZ  	?C0131
	DEC  	i?349
?C0131:
	LJMP 	?C0049
; }
			; SOURCE LINE # 201
?C0052:
	RET  	
; END OF FindFiles

; 
; 
; //Initial Flash 
; void InitFlash()

	RSEG  ?PR?InitFlash?FLASH
InitFlash:
	USING	0
			; SOURCE LINE # 205
; {
			; SOURCE LINE # 206
; 	int i;
; 	for(i=0; i<512; i++) {
			; SOURCE LINE # 208
;---- Variable 'i?450' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
?C0053:
; 		wdata_buffer[i] = 0;
			; SOURCE LINE # 209
	MOV  	A,#LOW (wdata_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (wdata_buffer)
	ADDC 	A,R6
	MOV  	DPH,A
	CLR  	A
	MOVX 	@DPTR,A
; 		rdata_buffer[i] = 0;
			; SOURCE LINE # 210
	MOV  	A,#LOW (rdata_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (rdata_buffer)
	ADDC 	A,R6
	MOV  	DPH,A
	CLR  	A
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 211
	INC  	R7
	CJNE 	R7,#00H,?C0132
	INC  	R6
?C0132:
	CLR  	A
	CJNE 	A,AR7,?C0053
	MOV  	A,R6
	CJNE 	A,#02H,?C0053
?C0054:
; 
; 	for(i=0; i<16; i++) {
			; SOURCE LINE # 213
	CLR  	A
	MOV  	R6,A
	MOV  	R7,A
?C0056:
; 		wparameter_buffer[i] = 0;
			; SOURCE LINE # 214
	MOV  	A,#LOW (wparameter_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (wparameter_buffer)
	MOV  	DPH,A
	CLR  	A
	MOVX 	@DPTR,A
; 		rparameter_buffer[i] = 0;
			; SOURCE LINE # 215
	MOV  	A,#LOW (rparameter_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (rparameter_buffer)
	MOV  	DPH,A
	CLR  	A
	MOVX 	@DPTR,A
; 	}
			; SOURCE LINE # 216
	INC  	R7
	CJNE 	R7,#00H,?C0134
	INC  	R6
?C0134:
	MOV  	A,R7
	XRL  	A,#010H
	ORL  	A,R6
	JNZ  	?C0056
?C0057:
; 	
; 	for(i=0; i<MAXFLASH; i++)
			; SOURCE LINE # 218
	CLR  	A
	MOV  	R6,A
	MOV  	R7,A
?C0059:
; 		FlashChip[i] = 0;
			; SOURCE LINE # 219
	MOV  	R6,#06H
	MOV  	DPTR,#FlashChip
	CLR  	A
?C0135:
	MOVX 	@DPTR,A
	INC  	DPTR
	DJNZ 	R6,?C0135
?C0060:
; 
; 	FileNumber = 0;
			; SOURCE LINE # 221
	CLR  	A
	MOV  	DPTR,#FileNumber
	MOVX 	@DPTR,A
; 	NowFileName = 0;
			; SOURCE LINE # 222
	MOV  	DPTR,#NowFileName
	MOVX 	@DPTR,A
; 	
; 	ADDR9_16 = 0;
			; SOURCE LINE # 224
	MOV  	DPTR,#ADDR9_16
	MOVX 	@DPTR,A
; 	ADDR17_24 = 0;
			; SOURCE LINE # 225
	MOV  	DPTR,#ADDR17_24
	MOVX 	@DPTR,A
; 	ADDR25 = 0;
			; SOURCE LINE # 226
	MOV  	DPTR,#ADDR25
	MOVX 	@DPTR,A
; 	UseChip = 0;
			; SOURCE LINE # 227
	MOV  	DPTR,#UseChip
	MOVX 	@DPTR,A
; 	
; 	ErrorFlash = 0;	
			; SOURCE LINE # 229
	MOV  	DPTR,#ErrorFlash
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 230
	RET  	
; END OF InitFlash

; 
; void FindFlash()

	RSEG  ?PR?FindFlash?FLASH
FindFlash:
	USING	0
			; SOURCE LINE # 232
; {	
			; SOURCE LINE # 233
; 	int i=0,j,m;
			; SOURCE LINE # 234
;---- Variable 'i?551' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
; 	P1= 0xFF;
			; SOURCE LINE # 235
	MOV  	P1,#0FFH
; 	P23 = 0; //
			; SOURCE LINE # 236
	CLR  	P23
; 	P22 = 0;
			; SOURCE LINE # 237
	CLR  	P22
; 	P20 = 0;
			; SOURCE LINE # 238
	CLR  	P20
; 	for(i=0;i<MAXFLASH;i++)
			; SOURCE LINE # 239
?C0063:
; 	{
			; SOURCE LINE # 240
; 		m=1;
			; SOURCE LINE # 241
	MOV  	m?553,#00H
	MOV  	m?553+01H,#01H
; 		for(j=1;j<=i;j++)
			; SOURCE LINE # 242
;---- Variable 'j?552' assigned to Register 'R2/R3' ----
	MOV  	R3,#01H
	MOV  	R2,#00H
?C0066:
	SETB 	C
	MOV  	A,R3
	SUBB 	A,R5
	MOV  	A,R4
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R2
	XRL  	A,#080H
	SUBB 	A,R0
	JNC  	?C0067
; 		{
			; SOURCE LINE # 243
; 			m = 2*m;
			; SOURCE LINE # 244
	MOV  	A,m?553+01H
	ADD  	A,ACC
	MOV  	m?553+01H,A
	MOV  	A,m?553
	RLC  	A
	MOV  	m?553,A
; 		}
			; SOURCE LINE # 245
	INC  	R3
	CJNE 	R3,#00H,?C0136
	INC  	R2
?C0136:
	SJMP 	?C0066
?C0067:
; 		P1=0xFF-m;//P10=0 enable chip 1
			; SOURCE LINE # 246
	CLR  	C
	MOV  	A,#0FFH
	SUBB 	A,m?553+01H
	MOV  	P1,A
; 		P23 = 1; 	// p 2.3  = command latch enable
			; SOURCE LINE # 247
	SETB 	P23
; 		P0 =0x71;	// p0   = 0x71  
			; SOURCE LINE # 248
	MOV  	P0,#071H
; 		P21 = 0 ;   // P2.1 = WR enable
			; SOURCE LINE # 249
	CLR  	P21
; 		P21 = 1 ;   //
			; SOURCE LINE # 250
	SETB 	P21
; 		P0 = 0xff;
			; SOURCE LINE # 251
	MOV  	P0,#0FFH
; 		P23 = 0;
			; SOURCE LINE # 252
	CLR  	P23
; 		P25 = 0;	// P2.5 = RD enable
			; SOURCE LINE # 253
	CLR  	P25
; 		FlashChip[i] = P0;
			; SOURCE LINE # 254
	MOV  	A,#LOW (FlashChip)
	ADD  	A,R5
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOV  	A,P0
	MOVX 	@DPTR,A
; 		P25 = 1;   // P2.5 = RD disenable
			; SOURCE LINE # 255
	SETB 	P25
; 		P1=0xFF;
			; SOURCE LINE # 256
	MOV  	P1,#0FFH
; 	}
			; SOURCE LINE # 257
	INC  	R5
	CJNE 	R5,#00H,?C0137
	INC  	R4
?C0137:
	MOV  	A,R5
	XRL  	A,#06H
	ORL  	A,R4
	JNZ  	?C0063
; }
			; SOURCE LINE # 258
?C0069:
	RET  	
; END OF FindFlash

; 
; //erase all chip 
; void  EraseFlash()

	RSEG  ?PR?EraseFlash?FLASH
EraseFlash:
	USING	0
			; SOURCE LINE # 261
; {	
			; SOURCE LINE # 262
; 	int i=0;
			; SOURCE LINE # 263
	CLR  	A
	MOV  	i?654,A
	MOV  	i?654+01H,A
; 	for(i=0;i<MAXFLASH;i++) {
			; SOURCE LINE # 264
	MOV  	i?654,A
	MOV  	i?654+01H,A
?C0070:
; 		if(FlashChip[i] == 0x40)
			; SOURCE LINE # 265
	MOV  	R7,i?654+01H
	MOV  	A,#LOW (FlashChip)
	ADD  	A,R7
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (FlashChip)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	CJNE 	A,#040H,?C0072
; 			EraseOneFlash(i);
			; SOURCE LINE # 266
	LCALL	_EraseOneFlash
; 	}
			; SOURCE LINE # 267
?C0072:
	INC  	i?654+01H
	MOV  	A,i?654+01H
	JNZ  	?C0138
	INC  	i?654
?C0138:
	CLR  	C
	SUBB 	A,#06H
	MOV  	A,i?654
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0070
?C0071:
; 
; 	// 重置文件数
; 	FileNumber = 0;
			; SOURCE LINE # 270
	CLR  	A
	MOV  	DPTR,#FileNumber
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 271
	RET  	
; END OF EraseFlash

; 
; //erase one chip 
; void EraseOneFlash(unsigned char i)			//Erase one block(16K Byte)

	RSEG  ?PR?_EraseOneFlash?FLASH
_EraseOneFlash:
	USING	0
	MOV  	i?755,R7
			; SOURCE LINE # 274
; {
			; SOURCE LINE # 275
; 	unsigned char Statuse;	//Status return
; 	unsigned char addr9_16  = 0x00;
			; SOURCE LINE # 277
	CLR  	A
	MOV  	addr9_16?757,A
; 	unsigned char addr17_24 = 0x00;
			; SOURCE LINE # 278
	MOV  	addr17_24?758,A
; 	unsigned char addr25    = 0x00;//2*i;//question???
			; SOURCE LINE # 279
;---- Variable 'addr25?759' assigned to Register 'R1' ----
	MOV  	R1,A
; 
; 	int j,m = 1 ;
			; SOURCE LINE # 281
;---- Variable 'm?761' assigned to Register 'R4/R5' ----
	MOV  	R5,#01H
	MOV  	R4,A
; 	for(j = 1 ;j <= i;j++ )
			; SOURCE LINE # 282
;---- Variable 'j?760' assigned to Register 'R2/R3' ----
	MOV  	R3,#01H
	MOV  	R2,A
?C0075:
	SETB 	C
	MOV  	A,R3
	SUBB 	A,i?755
	MOV  	A,#080H
	MOV  	R0,A
	XRL  	A,R2
	SUBB 	A,R0
	JNC  	?C0076
; 	{
			; SOURCE LINE # 283
; 		m = 2*m;
			; SOURCE LINE # 284
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R5,A
	MOV  	A,R4
	RLC  	A
	MOV  	R4,A
; 	}
			; SOURCE LINE # 285
	INC  	R3
	CJNE 	R3,#00H,?C0139
	INC  	R2
?C0139:
	SJMP 	?C0075
?C0076:
; 	
; 	P25 = 1; //RD
			; SOURCE LINE # 287
	SETB 	P25
; 	P22 = 0; //ALE
			; SOURCE LINE # 288
	CLR  	P22
; 	P23 = 0; //CLE
			; SOURCE LINE # 289
	CLR  	P23
; 	P20 = 1; //WR protect
			; SOURCE LINE # 290
	SETB 	P20
; 	P21 = 1; //WR
			; SOURCE LINE # 291
	SETB 	P21
; 	
; 	
; loop:
			; SOURCE LINE # 294
?_EraseOneFlash?loop:
; 	P1 =0xFF-m;
			; SOURCE LINE # 295
	CLR  	C
	MOV  	A,#0FFH
	SUBB 	A,R5
	MOV  	P1,A
; 	P23 = 1; //CLE command latch
			; SOURCE LINE # 296
	SETB 	P23
; 	P0 = 0x60; // send a command to flash, ready to erase
			; SOURCE LINE # 297
	MOV  	P0,#060H
; 	P21 = 0; //WR
			; SOURCE LINE # 298
	CLR  	P21
; 	P21 = 1;
			; SOURCE LINE # 299
	SETB 	P21
; 	P23 = 0;
			; SOURCE LINE # 300
	CLR  	P23
; 	P22 = 1;
			; SOURCE LINE # 301
	SETB 	P22
; 	P0 = addr9_16;
			; SOURCE LINE # 302
	MOV  	P0,addr9_16?757
; 	P21 = 0; //WR
			; SOURCE LINE # 303
	CLR  	P21
; 	P21 = 1;
			; SOURCE LINE # 304
	SETB 	P21
; 	
; 	P0 = addr17_24;
			; SOURCE LINE # 306
	MOV  	P0,addr17_24?758
; 	P21 = 0; //WR
			; SOURCE LINE # 307
	CLR  	P21
; 	P21 = 1;
			; SOURCE LINE # 308
	SETB 	P21
; 	
; 	P0 = addr25;
			; SOURCE LINE # 310
	MOV  	P0,R1
; 	P21 = 0; //WR
			; SOURCE LINE # 311
	CLR  	P21
; 	P21 = 1;
			; SOURCE LINE # 312
	SETB 	P21
; 	
; 	P22 = 0; //ALE
			; SOURCE LINE # 314
	CLR  	P22
; 	P23 = 1; //CLE
			; SOURCE LINE # 315
	SETB 	P23
; 	
; 	P0 = 0xd0;//Erase confirm commmand
			; SOURCE LINE # 317
	MOV  	P0,#0D0H
; 	
; 	P21 = 0; //WE
			; SOURCE LINE # 319
	CLR  	P21
; 	P21 = 1; //WE
			; SOURCE LINE # 320
	SETB 	P21
; 	P23 = 0;  //CLE	
			; SOURCE LINE # 321
	CLR  	P23
; 	do
;     {
			; SOURCE LINE # 323
; 	}while(P26!=1); //wait P26 =1 ,command erase respond end
			; SOURCE LINE # 324
?C0079:
	JNB  	P26,?C0079
; 	P23 = 1;
			; SOURCE LINE # 325
	SETB 	P23
; 	P0 =0x70;
			; SOURCE LINE # 326
	MOV  	P0,#070H
; 	P21 = 0; //WE
			; SOURCE LINE # 327
	CLR  	P21
; 	P21 = 1; //WE
			; SOURCE LINE # 328
	SETB 	P21
; 	P0 =0xFF;
			; SOURCE LINE # 329
	MOV  	P0,#0FFH
; 	P23 = 0;
			; SOURCE LINE # 330
	CLR  	P23
; 	P25 = 0; //RD
			; SOURCE LINE # 331
	CLR  	P25
; 	Statuse = P0;
			; SOURCE LINE # 332
;---- Variable 'Statuse?756' assigned to Register 'R7' ----
	MOV  	R7,P0
; 	P25 = 1; //RD
			; SOURCE LINE # 333
	SETB 	P25
; 	
; 	Statuse &=0x0F;
			; SOURCE LINE # 335
	ANL  	AR7,#0FH
; 	if(Statuse !=0) ErrorFlash++;
			; SOURCE LINE # 336
	MOV  	A,R7
	JZ   	?C0082
	MOV  	DPTR,#ErrorFlash+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0140
	MOV  	DPTR,#ErrorFlash
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0140:
?C0082:
; 	
; 	P1 = 0xFF;
			; SOURCE LINE # 338
	MOV  	P1,#0FFH
; 	
; 	addr9_16+=0x20; //Address add
			; SOURCE LINE # 340
	MOV  	A,#020H
	ADD  	A,addr9_16?757
	MOV  	addr9_16?757,A
; 	if(addr9_16 == 0x00)
			; SOURCE LINE # 341
	JNZ  	?C0083
; 	{		
			; SOURCE LINE # 342
; 		addr17_24++; //Address add
			; SOURCE LINE # 343
	INC  	addr17_24?758
; 		if(addr17_24 == 0x00)
			; SOURCE LINE # 344
	MOV  	A,addr17_24?758
	JNZ  	?C0083
; 		{
			; SOURCE LINE # 345
; 			addr25++; //Address add					
			; SOURCE LINE # 346
	INC  	R1
; 		}
			; SOURCE LINE # 347
; 	}
			; SOURCE LINE # 348
?C0083:
; 	if(addr25>1)
			; SOURCE LINE # 349
	MOV  	A,R1
	SETB 	C
	SUBB 	A,#01H
	JC   	?_EraseOneFlash?loop
; 		return;//(ADDR25!=(0x2*i))&&(ADDR25!=(0x2*i+1)) questions
; 	goto loop; 
			; SOURCE LINE # 351
; }
			; SOURCE LINE # 352
?C0086:
	RET  	
; END OF _EraseOneFlash

; 
; void WriteOnePage(int chip,unsigned char addr9_16,unsigned char addr17_24,unsigned char addr25)

	RSEG  ?PR?_WriteOnePage?FLASH
_WriteOnePage:
	USING	0
	MOV  	chip?862,R6
	MOV  	chip?862+01H,R7
	MOV  	addr9_16?863,R5
;---- Variable 'addr17_24?864' assigned to Register 'R1' ----
	MOV  	R1,AR3
			; SOURCE LINE # 354
; {	
			; SOURCE LINE # 355
; 	unsigned char Statusw;
; 	int i,j,m = 1;	
			; SOURCE LINE # 357
;---- Variable 'm?869' assigned to Register 'R4/R5' ----
	MOV  	R5,#01H
	MOV  	R4,#00H
; 	
; 	if(chip >= MAXFLASH)
			; SOURCE LINE # 359
	CLR  	C
	MOV  	A,chip?862+01H
	SUBB 	A,#06H
	MOV  	A,chip?862
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	$ + 5H
	LJMP 	?C0088
?C0087:
; 		return;
; 	
; 	for(j = 1; j<=chip; j++)
			; SOURCE LINE # 362
;---- Variable 'j?868' assigned to Register 'R2/R3' ----
	MOV  	R3,#01H
	MOV  	R2,#00H
?C0089:
	SETB 	C
	MOV  	A,R3
	SUBB 	A,chip?862+01H
	MOV  	A,chip?862
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R2
	XRL  	A,#080H
	SUBB 	A,R0
	JNC  	?C0090
; 	{
			; SOURCE LINE # 363
; 		m = 2*m;
			; SOURCE LINE # 364
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R5,A
	MOV  	A,R4
	RLC  	A
	MOV  	R4,A
; 	}
			; SOURCE LINE # 365
	INC  	R3
	CJNE 	R3,#00H,?C0141
	INC  	R2
?C0141:
	SJMP 	?C0089
?C0090:
; 	P25 = 1; //RE
			; SOURCE LINE # 366
	SETB 	P25
; 	P22 = 0; //ALE
			; SOURCE LINE # 367
	CLR  	P22
; 	P23 = 0; //CLE
			; SOURCE LINE # 368
	CLR  	P23
; 	P20 = 1; //WP
			; SOURCE LINE # 369
	SETB 	P20
; 	P21 = 1; //WE	
			; SOURCE LINE # 370
	SETB 	P21
; 	
; 	//P10=0;//
; 	P1 = 0xFF-m;//CE
			; SOURCE LINE # 373
	CLR  	C
	MOV  	A,#0FFH
	SUBB 	A,R5
	MOV  	P1,A
; 	//Address input
; 	do 
; 	{	
			; SOURCE LINE # 376
; 	}while(P26 != 1); //wait P26 =1 ,command erase respond end
			; SOURCE LINE # 377
?C0092:
	JNB  	P26,?C0092
; 	P23 = 1;//CLE	
			; SOURCE LINE # 378
	SETB 	P23
; 	P0 = 0x80; //write command
			; SOURCE LINE # 379
	MOV  	P0,#080H
; 	P21 = 0;   //WE
			; SOURCE LINE # 380
	CLR  	P21
; 	P21 = 1;   //WE
			; SOURCE LINE # 381
	SETB 	P21
; 	P23 = 0;   //CLE
			; SOURCE LINE # 382
	CLR  	P23
; 	P22 = 1;   //ALE
			; SOURCE LINE # 383
	SETB 	P22
; 	P0 = 0x00; //Address A0_A7
			; SOURCE LINE # 384
	CLR  	A
	MOV  	P0,A
; 	P21 = 0;   //WE
			; SOURCE LINE # 385
	CLR  	P21
; 	P21 = 1;   //WE
			; SOURCE LINE # 386
	SETB 	P21
; 	P0 = addr9_16; //Address A9_A16
			; SOURCE LINE # 387
	MOV  	P0,addr9_16?863
; 	P21 = 0;   //WE
			; SOURCE LINE # 388
	CLR  	P21
; 	P21 = 1;   //WE
			; SOURCE LINE # 389
	SETB 	P21
; 	P0 = addr17_24; //Address A17_A24
			; SOURCE LINE # 390
	MOV  	P0,R1
; 	P21 = 0;   //WE
			; SOURCE LINE # 391
	CLR  	P21
; 	P21 = 1;   //WE
			; SOURCE LINE # 392
	SETB 	P21
; 	P0 = addr25; //Address A25
			; SOURCE LINE # 393
	MOV  	P0,addr25?865
; 	P21 = 0;   //WE
			; SOURCE LINE # 394
	CLR  	P21
; 	P21 = 1;   //WE
			; SOURCE LINE # 395
	SETB 	P21
; 	P22 = 0;  //CLE
			; SOURCE LINE # 396
	CLR  	P22
; 	//write buffer data input flash 
; 	do 
; 	{		
			; SOURCE LINE # 399
; 	}while(P26 != 1); //wait P26 =1 ,command erase respond end
			; SOURCE LINE # 400
?C0095:
	JNB  	P26,?C0095
; 	//write char to flash
; 	for(i=0;i<512;i++)
			; SOURCE LINE # 402
;---- Variable 'i?867' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
?C0098:
; 	{
			; SOURCE LINE # 403
; 		P0 = wdata_buffer[i];//data input flash				
			; SOURCE LINE # 404
	MOV  	A,#LOW (wdata_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (wdata_buffer)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	P0,A
; 		P21=0;
			; SOURCE LINE # 405
	CLR  	P21
; 		P21=1;
			; SOURCE LINE # 406
	SETB 	P21
; 	}
			; SOURCE LINE # 407
	INC  	R7
	CJNE 	R7,#00H,?C0142
	INC  	R6
?C0142:
	CLR  	A
	CJNE 	A,AR7,?C0098
	MOV  	A,R6
	CJNE 	A,#02H,?C0098
?C0099:
; 	for(j=0;j<16;j++)
			; SOURCE LINE # 408
	CLR  	A
	MOV  	R2,A
	MOV  	R3,A
?C0101:
; 	{	
			; SOURCE LINE # 409
; 		P0 = wparameter_buffer[j];//parameter input flash
			; SOURCE LINE # 410
	MOV  	A,#LOW (wparameter_buffer)
	ADD  	A,R3
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (wparameter_buffer)
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	P0,A
; 		P21 = 0;//WE
			; SOURCE LINE # 411
	CLR  	P21
; 		P21 = 1;//WE
			; SOURCE LINE # 412
	SETB 	P21
; 	}
			; SOURCE LINE # 413
	INC  	R3
	CJNE 	R3,#00H,?C0144
	INC  	R2
?C0144:
	MOV  	A,R3
	XRL  	A,#010H
	ORL  	A,R2
	JNZ  	?C0101
?C0102:
; 	P23 = 1;//CLE H
			; SOURCE LINE # 414
	SETB 	P23
; 	P0  = 0x10;		//command end
			; SOURCE LINE # 415
	MOV  	P0,#010H
; 	P21 = 0;//WE
			; SOURCE LINE # 416
	CLR  	P21
; 	P21 = 1;//WE
			; SOURCE LINE # 417
	SETB 	P21
; 	P23 = 0;//CLE
			; SOURCE LINE # 418
	CLR  	P23
; 	do 
; 	{		
			; SOURCE LINE # 420
; 	}while(P26 != 1); //wait P26 =1 ,command erase respond end
			; SOURCE LINE # 421
?C0104:
	JNB  	P26,?C0104
; 	
; 	P23 = 1;//CLE
			; SOURCE LINE # 423
	SETB 	P23
; 	P0  = 0x70; //command
			; SOURCE LINE # 424
	MOV  	P0,#070H
; 	
; 	P21 = 0;//WE
			; SOURCE LINE # 426
	CLR  	P21
; 	P21 = 1;//WE
			; SOURCE LINE # 427
	SETB 	P21
; 	P23 = 0;//CLE
			; SOURCE LINE # 428
	CLR  	P23
; 	
; 	P0  =0xFF;
			; SOURCE LINE # 430
	MOV  	P0,#0FFH
; 	P25=0;//RE
			; SOURCE LINE # 431
	CLR  	P25
; 	Statusw = P0;
			; SOURCE LINE # 432
	MOV  	Statusw?866,P0
; 	P25 = 1;//RE
			; SOURCE LINE # 433
	SETB 	P25
; 	P1=0xFF;
			; SOURCE LINE # 434
	MOV  	P1,#0FFH
; 	P20=0;
			; SOURCE LINE # 435
	CLR  	P20
; 	//return Statusw;
; }
			; SOURCE LINE # 437
?C0088:
	RET  	
; END OF _WriteOnePage

; 
; void ReadOnePage(int chip,unsigned char addr9_16,unsigned char addr17_24,unsigned char addr25)

	RSEG  ?PR?_ReadOnePage?FLASH
L?0150:
	USING	0
	MOV  	DPTR,#ADDR17_24
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	DPTR,#ADDR25
	MOVX 	A,@DPTR
	MOV  	?_ReadOnePage?BYTE+04H,A
_ReadOnePage:
	USING	0
	MOV  	chip?970,R6
	MOV  	chip?970+01H,R7
	MOV  	addr9_16?971,R5
;---- Variable 'addr17_24?972' assigned to Register 'R1' ----
	MOV  	R1,AR3
			; SOURCE LINE # 439
; {
			; SOURCE LINE # 440
; 	int i,j,m = 1;//,delay;
			; SOURCE LINE # 441
;---- Variable 'm?976' assigned to Register 'R4/R5' ----
	MOV  	R5,#01H
	MOV  	R4,#00H
; 	
; 	for(j = 1; j<=chip; j++)
			; SOURCE LINE # 443
;---- Variable 'j?975' assigned to Register 'R2/R3' ----
	MOV  	R3,#01H
	MOV  	R2,#00H
?C0107:
	SETB 	C
	MOV  	A,R3
	SUBB 	A,chip?970+01H
	MOV  	A,chip?970
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R2
	XRL  	A,#080H
	SUBB 	A,R0
	JNC  	?C0108
; 	{
			; SOURCE LINE # 444
; 		m = 2*m;
			; SOURCE LINE # 445
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R5,A
	MOV  	A,R4
	RLC  	A
	MOV  	R4,A
; 	}
			; SOURCE LINE # 446
	INC  	R3
	CJNE 	R3,#00H,?C0145
	INC  	R2
?C0145:
	SJMP 	?C0107
?C0108:
; 	P25 = 1;//RE
			; SOURCE LINE # 447
	SETB 	P25
; 	P22 = 0;//ALE
			; SOURCE LINE # 448
	CLR  	P22
; 	P23 = 0;//CLE
			; SOURCE LINE # 449
	CLR  	P23
; 	P20 = 0;//WP
			; SOURCE LINE # 450
	CLR  	P20
; 	P21 = 1;//WE
			; SOURCE LINE # 451
	SETB 	P21
; 	
; 	//P10 = 0;
; 	P1 = 0xFF-m;//CE
			; SOURCE LINE # 454
	CLR  	C
	MOV  	A,#0FFH
	SUBB 	A,R5
	MOV  	P1,A
; 	
; 	//Address input
; 	P23 = 1;		//CLE
			; SOURCE LINE # 457
	SETB 	P23
; 	P0   = 0x00;	//read command
			; SOURCE LINE # 458
	CLR  	A
	MOV  	P0,A
; 	P21 = 0;		//WE
			; SOURCE LINE # 459
	CLR  	P21
; 	P21 = 1;		//WE
			; SOURCE LINE # 460
	SETB 	P21
; 	P23 = 0;		//CLE
			; SOURCE LINE # 461
	CLR  	P23
; 	P22 = 1;		//ALE
			; SOURCE LINE # 462
	SETB 	P22
; 	P0   = 0x00; 	//Address A0_A7
			; SOURCE LINE # 463
	MOV  	P0,A
; 	P21  = 0;   		//WE
			; SOURCE LINE # 464
	CLR  	P21
; 	P21  = 1;   		//WE
			; SOURCE LINE # 465
	SETB 	P21
; 	P0   = addr9_16; 	//Address A9_A16
			; SOURCE LINE # 466
	MOV  	P0,addr9_16?971
; 	P21  = 0;   		//WE
			; SOURCE LINE # 467
	CLR  	P21
; 	P21  = 1;   		//WE
			; SOURCE LINE # 468
	SETB 	P21
; 	P0   = addr17_24; //Address A17_A24
			; SOURCE LINE # 469
	MOV  	P0,R1
; 	P21  = 0;   		//WE
			; SOURCE LINE # 470
	CLR  	P21
; 	P21  = 1;   		//WE
			; SOURCE LINE # 471
	SETB 	P21
; 	P0   = addr25; 	//Address A25
			; SOURCE LINE # 472
	MOV  	P0,addr25?973
; 	P21  = 0;   		//WE
			; SOURCE LINE # 473
	CLR  	P21
; 	P21  = 1;   		//WE
			; SOURCE LINE # 474
	SETB 	P21
; 	P22 = 0;		//CLE
			; SOURCE LINE # 475
	CLR  	P22
;     do
; 	{		
			; SOURCE LINE # 477
; 	}while(P26 != 1);////wait P26 =1 
			; SOURCE LINE # 478
?C0110:
	JNB  	P26,?C0110
;     P0 =0xFF;
			; SOURCE LINE # 479
	MOV  	P0,#0FFH
; 	
; 	for(i=0;i<512;i++)
			; SOURCE LINE # 481
;---- Variable 'i?974' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
?C0113:
; 	{	
			; SOURCE LINE # 482
; 		P25 = 0;//RE
			; SOURCE LINE # 483
	CLR  	P25
; 		rdata_buffer[i] = P0;//data into buffer
			; SOURCE LINE # 484
	MOV  	A,#LOW (rdata_buffer)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (rdata_buffer)
	ADDC 	A,R6
	MOV  	DPH,A
	MOV  	A,P0
	MOVX 	@DPTR,A
; 		P25 = 1;
			; SOURCE LINE # 485
	SETB 	P25
; 		for(j=0; j<1 ; j++);
			; SOURCE LINE # 486
	CLR  	A
	MOV  	R2,A
	MOV  	R3,A
?C0116:
	INC  	R3
	CJNE 	R3,#00H,?C0146
	INC  	R2
?C0146:
	MOV  	A,R3
	XRL  	A,#01H
	ORL  	A,R2
	JNZ  	?C0116
; 
; 	}				
			; SOURCE LINE # 488
?C0115:
	INC  	R7
	CJNE 	R7,#00H,?C0147
	INC  	R6
?C0147:
	CLR  	A
	CJNE 	A,AR7,?C0113
	MOV  	A,R6
	CJNE 	A,#02H,?C0113
?C0114:
; 	for(j=0;j<16;j++)
			; SOURCE LINE # 489
	CLR  	A
	MOV  	R2,A
	MOV  	R3,A
?C0119:
; 	{
			; SOURCE LINE # 490
; 		P25 = 0;
			; SOURCE LINE # 491
	CLR  	P25
; 		rparameter_buffer[j] = P0;//parameter into buffer
			; SOURCE LINE # 492
	MOV  	A,#LOW (rparameter_buffer)
	ADD  	A,R3
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,#HIGH (rparameter_buffer)
	MOV  	DPH,A
	MOV  	A,P0
	MOVX 	@DPTR,A
; 		P25 = 1;
			; SOURCE LINE # 493
	SETB 	P25
; 	}
			; SOURCE LINE # 494
	INC  	R3
	CJNE 	R3,#00H,?C0149
	INC  	R2
?C0149:
	MOV  	A,R3
	XRL  	A,#010H
	ORL  	A,R2
	JNZ  	?C0119
?C0120:
; 	P1 =0xFF;
			; SOURCE LINE # 495
	MOV  	P1,#0FFH
; }
			; SOURCE LINE # 496
	RET  	
; END OF _ReadOnePage

	END
